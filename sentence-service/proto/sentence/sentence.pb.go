// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sentence/sentence.proto

/*
Package jp_yonjuuni_srv_sentence is a generated protocol buffer package.

It is generated from these files:
	proto/sentence/sentence.proto

It has these top-level messages:
	InsertSentenceRequest
	InsertSentenceResponse
*/
package jp_yonjuuni_srv_sentence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InsertSentenceRequest struct {
}

func (m *InsertSentenceRequest) Reset()                    { *m = InsertSentenceRequest{} }
func (m *InsertSentenceRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertSentenceRequest) ProtoMessage()               {}
func (*InsertSentenceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InsertSentenceResponse struct {
}

func (m *InsertSentenceResponse) Reset()                    { *m = InsertSentenceResponse{} }
func (m *InsertSentenceResponse) String() string            { return proto.CompactTextString(m) }
func (*InsertSentenceResponse) ProtoMessage()               {}
func (*InsertSentenceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*InsertSentenceRequest)(nil), "jp.yonjuuni.srv.sentence.InsertSentenceRequest")
	proto.RegisterType((*InsertSentenceResponse)(nil), "jp.yonjuuni.srv.sentence.InsertSentenceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SentenceService service

type SentenceServiceClient interface {
	InsertSentence(ctx context.Context, in *InsertSentenceRequest, opts ...client.CallOption) (*InsertSentenceResponse, error)
}

type sentenceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewSentenceServiceClient(serviceName string, c client.Client) SentenceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "jp.yonjuuni.srv.sentence"
	}
	return &sentenceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *sentenceServiceClient) InsertSentence(ctx context.Context, in *InsertSentenceRequest, opts ...client.CallOption) (*InsertSentenceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SentenceService.InsertSentence", in)
	out := new(InsertSentenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SentenceService service

type SentenceServiceHandler interface {
	InsertSentence(context.Context, *InsertSentenceRequest, *InsertSentenceResponse) error
}

func RegisterSentenceServiceHandler(s server.Server, hdlr SentenceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SentenceService{hdlr}, opts...))
}

type SentenceService struct {
	SentenceServiceHandler
}

func (h *SentenceService) InsertSentence(ctx context.Context, in *InsertSentenceRequest, out *InsertSentenceResponse) error {
	return h.SentenceServiceHandler.InsertSentence(ctx, in, out)
}

func init() { proto.RegisterFile("proto/sentence/sentence.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0xcd, 0x2b, 0x49, 0xcd, 0x4b, 0x4e, 0x85, 0x33, 0xf4, 0xc0, 0xe2, 0x42,
	0x12, 0x59, 0x05, 0x7a, 0x95, 0xf9, 0x79, 0x59, 0xa5, 0xa5, 0x79, 0x99, 0x7a, 0xc5, 0x45, 0x65,
	0x7a, 0x30, 0x79, 0x25, 0x71, 0x2e, 0x51, 0xcf, 0xbc, 0xe2, 0xd4, 0xa2, 0x92, 0x60, 0xa8, 0x48,
	0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x92, 0x04, 0x97, 0x18, 0xba, 0x44, 0x71, 0x41, 0x7e,
	0x5e, 0x71, 0xaa, 0x51, 0x07, 0x23, 0x17, 0x3f, 0x4c, 0x30, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39,
	0x55, 0xa8, 0x94, 0x8b, 0x0f, 0x55, 0xb5, 0x90, 0xbe, 0x1e, 0x2e, 0x3b, 0xf5, 0xb0, 0x5a, 0x28,
	0x65, 0x40, 0xbc, 0x06, 0x88, 0x43, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xde, 0x33, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x00, 0x45, 0xf5, 0x19, 0xff, 0x00, 0x00, 0x00,
}
